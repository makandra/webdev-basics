!!!
%html{:lang => "en"}
  %head
    %meta{:content => "text/html; charset=UTF-8", "http-equiv" => "Content-Type"}/
    %meta{:charset => "utf-8"}/
    %title Web development 101
    %meta{:content => "A framework for easily creating beautiful presentations using HTML", :name => "description"}/
    %meta{:content => "Hakim El Hattab", :name => "author"}/
    %meta{:content => "yes", :name => "apple-mobile-web-app-capable"}/
    %meta{:content => "black-translucent", :name => "apple-mobile-web-app-status-bar-style"}/
    %meta{:content => "width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, minimal-ui", :name => "viewport"}/
    %link{:href => "css/reveal.css", :rel => "stylesheet"}/
    %link#theme{:href => "css/theme/blood.css", :rel => "stylesheet"}/
    %link{:href => "css/custom.css", :rel => "stylesheet"}/
    / Code syntax highlighting
    %link{:href => "lib/css/zenburn.css", :rel => "stylesheet"}/
    / Printing and PDF exports
    :javascript
      var link = document.createElement( 'link' );
      link.rel = 'stylesheet';
      link.type = 'text/css';
      link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css';
      document.getElementsByTagName( 'head' )[0].appendChild( link );
    /[if lt IE 9]
      <script src="lib/js/html5shiv.js"></script>
  %body
    .reveal
      / Any section element inside of this container is displayed as a slide
      .slides

        %section
          %h2 Web development 101
          %p
            %small
              %a{:href => "https://twitter.com/triskweline"} Henning Koch
              \/
              %a{:href => "http://www.makandra.de"} makandra GmbH

        %section
          %h2 This is a course for beginners

        %section
          %h2 Native apps vs. web apps

        %section
          %h2 Native applications

          %p
            Entire app runs on a single computer
          %p
            Entire app is (often) written in a single language
            %br
            %span.subtle
              Popular languages: Java, C#, C++, Objective-C

        %section
          %h2 Web applications

          %p
            Application runs on multiple computers
            %br
            %span.subtle
              Typical: One server, many clients (= web browsers)

          %p
            Application is written in a "stack" of many technologies
            %br
            %span.subtle
              Typical stack: HTML, CSS, Javascript, Ruby/PHP/Python, SQL

          %p
            Client and server run different parts of the application
            %br
            %span.subtle
              and they communicate over HTTP

        %section
          %table
            %tr
              %th
                Language
              %th
                Purpose
              %th
                Runs where?
            %tr
              %td
                HTML
              %td
                Textual content
              %td
                Client
            %tr
              %td
                CSS
              %td
                Layout & Design
              %td
                Client
            %tr
              %td
                Javascript
              %td
                Client-side interaction
              %td
                Client
            %tr
              %td
                HTTP
              %td
                Client/server communication
              %td Client/server
            %tr
              %td
                Ruby/PHP/Python
              %td
                Controller & Model
              %td
                Server
            %tr
              %td
                SQL
              %td
                Database access
              %td
                Server


        %section
          %h2 In 2015 web apps are the dominant form of user-facing applications

          %ul
            %li
              Can be used from any device with a web browser
              %br
              %span.subtle
                (Windows, Linux, MacOS, Android ...)
            %li
              No installation
              %br
              %span.subtle
                Web browser downloads and "installs" a fresh copy every time
                you visit a website
            %li Is always the latest version
            %li Inherently multi-user

        %section
          %h2 Today

          %ul
            %li HTML &amp; HTTP
            %li CSS
            %li Javascript
            %li Server-side web applications

          %br
          %br

          %h4 Read along

          %p
            %a(href='http://webdev101.makandra.de') http://webdev101.makandra.de<br>
            %a(href='https://github.com/makandra/webdev101') https://github.com/makandra/webdev101

        %section(data-background-color='#245')
          .s
            %h2
              HTML<br />
              %span.subtle Hypertext Markup Language
            %h2
              HTTP<br />
              %span.subtle Hypertext Transfer Protocol


        %section

          .columns
            .column

              %pre
                %code.html(data-trim)
                  :preserve
                    &lt;html&gt;
                      &lt;body&gt;
                        &lt;h1&gt;Hi there!&lt;/h1&gt;
                        &lt;p&gt;Look at this image:&lt;/p&gt;
                        &lt;img src="image.png"&gt;
                      &lt;/body&gt;
                    &lt;/html&gt;
              %p
                %a(target='_blank' href='examples/1010_request_response/') View example

            .column
              %img(src='pictures/screenshot_request_response.png' width=400)


        %section
          %p
            User enters into her browser's address bar:

          %pre
            %code.nohighlight(data-trim)
              :preserve
                http://www.makandra.com/page.html

          %p
            What happens?

        %section

          %p
            Browser asks server:

          %pre.xs.fragment
            %code.nohighlight(data-trim)
              :preserve
                GET /page.html HTTP/1.1        # I want the file /page.html
                Host: www.makandra.com         # I want it from www.makandra.com
                Accept: text/html, text/plain  # I understand HTML and plain text

          %p.fragment
            Server looks for a local file <code>page.html</code> and replies:

          %pre.xs.fragment
            %code.nohighlight(data-trim)
              :preserve
                HTTP/1.1 200 OK                # I found what you wanted
                Content-Length: 114            # What you want has 114 bytes
                Content-Type: text/html        # And it's in HTML format
                                               # Here it comes:
                &lt;html&gt;
                  &lt;body&gt;
                    &lt;h1&gt;Hi there!&lt;/h1&gt;
                    &lt;p&gt;Look at this image:&lt;/p&gt;
                    &lt;img src="image.jpg"&gt;
                  &lt;/body&gt;
                &lt;/html&gt;

        %section
          %p
            The browser parses the HTML and encounters this tag:

          %pre
            %code.html(data-trim)
              :preserve
                &lt;img src="image.jpg"&gt;

          %p
            What happens?


        %section

          %p
            Browser asks server:

          %pre.xs.fragment
            %code.nohighlight(data-trim)
              :preserve
                GET /image.jpg HTTP/1.1        # I want the file /image.jpg
                Host: www.makandra.com         # I want it from www.makandra.com
                Accept: image/jpeg, image/png  # I understand JPEG and PNG

          %p.fragment
            Server looks for a local file <code>image.jpg</code> and replies:

          %pre.xs.fragment
            %code.nohighlight(data-trim)
              :preserve
                HTTP/1.1 200 OK                # I found what you wanted
                Content-Length: 67840          # What you want has 66 KB
                Content-Type: image/jpeg       # And it's in JPEG format
                                               # Here it comes:
                FF D8 FF E0 00 10 4A 46
                49 46 00 01 01 01 00 48
                00 48 00 00 FF E1 1C 13
                45 78 69 66 00 00 49 49
                2A 00 08 00 00 00 0D 00
                0F 01 02 00 06 00 00 00
                ...
        %section
          %pre.xxl
            %code.nohighlight(data-trim)
              telnet www.uni-augsburg.de 80


        %section
          %h2 HTML
          %ul
            %li
              %a(target='_blank' href='examples/1015_more_tags/page.html') More tags
            %li
              %a(target='_blank' href='examples/1020_video/page.html') Video & fallbacks
            %li
              %a(target='_blank' href='examples/1025_table/page.html') Table
            %li
              %a(target='_blank' href='examples/1030_form/page.html') Form


        %section(data-background-color='#245')
          %h2
            CSS<br />
            %span.subtle Cascading Style Sheets

        %section
          .columns
            .column
              %h2 HTML
              %pre
                %code.html(data-trim)
                  :preserve
                    &lt;html&gt;
                      &lt;body&gt;
                        &lt;h1&gt;About Capybaras&lt;/h1&gt;
                        &lt;p&gt;
                          The capybara is the
                          <b>largest</b> rodent
                          in the world.
                        &lt;/p&gt;
                      &lt;/body&gt;
                    &lt;/html&gt;
                    &nbsp;
                    &nbsp;

            .column.fragment
              %h2 CSS
              %pre
                %code.css(data-trim)
                  :preserve
                    body {
                      font-family: 'Arial';
                    }

                    h1 {
                      text-transform: uppercase;
                      font-style: italic;
                    }

                    b {
                      background-color: #ff0000;
                    }

          %p.center.fragment
            %a(target='_blank' href='examples/1045_simple_css/page.html') View both together

        %section
          %h2 Colors in CSS

          .columns
            .column
              %div(style='font-weight: bold; color: #ff0000') <code>#ff0000</code>
              %div(style='font-weight: bold; color: #00ff00') <code>#00ff00</code>
              %div(style='font-weight: bold; color: #0000ff') <code>#0000ff</code>
              %div(style='font-weight: bold; color: #ffff00') <code>#ffff00</code>
              %div(style='font-weight: bold; color: #ffffff') <code>#ffffff</code>
              %div(style='font-weight: bold; color: #000000') <code>#000000</code>
              %div(style='font-weight: bold; color: #ff9900') <code>#ff9900</code>
              %div(style='font-weight: bold; color: #4488bb') <code>#4488bb</code>
              %div(style='font-weight: bold; color: #9900ff') <code>#9900ff</code>
              %div(style='font-weight: bold; color: #777777') <code>#777777</code>
              %div(style='font-weight: bold; color: #22aa88') <code>#22aa88</code>
              %div(style='font-weight: bold; color: #885555') <code>#885555</code>
            .column
              .fragment
                %div(style='font-weight: bold; color: red') <code>red</code>
                %div(style='font-weight: bold; color: yellow') <code>yellow</code>
                %div(style='font-weight: bold; color: fuchsia') <code>fuchsia</code>
                %div(style='font-weight: bold; color: rebeccapurple') <code>rebeccapurple</code>
              .fragment
                %div(style='font-weight: bold; color: rgba(255, 0, 0, 1.0)') <code>rgba(255, 0, 0, 1.0)</code>
                %div(style='font-weight: bold; color: rgba(255, 0, 0, 0.75)') <code>rgba(255, 0, 0, 0.75)</code>
                %div(style='font-weight: bold; color: rgba(255, 0, 0, 0.5)') <code>rgba(255, 0, 0, 0.5)</code>
                %div(style='font-weight: bold; color: rgba(255, 0, 0, 0.25)') <code>rgba(255, 0, 0, 0.25)</code>
              .fragment
                %div(style='font-weight: bold; color: hsl(0, 100%, 50%)') <code>hsl(0, 100%, 50%)</code>
                %div(style='font-weight: bold; color: hsl(30, 100%, 50%)') <code>hsl(30, 100%, 50%)</code>
                %div(style='font-weight: bold; color: hsl(30, 50%, 50%)') <code>hsl(30, 50%, 50%)</code>
                %div(style='font-weight: bold; color: hsl(30, 50%, 70%)') <code>hsl(30, 50%, 70%)</code>


        %section
          %h2 How to link HTML and CSS (1)

          %pre
            %code.html(data-trim)
              :preserve
                &lt;html&gt;
                  &lt;head&gt;
                    &lt;style&gt;
                      h1 {
                        color: #ff0000;
                      }
                    &lt;/style&gt;
                  &lt;/head&gt;
                  &lt;body&gt;
                    ...
                  &lt;/body&gt;
                &lt;/html&gt;

        %section
          %h2 How to link HTML and CSS (2)

          %pre
            %code.html(data-trim)
              :preserve
                &lt;html&gt;
                  &lt;head&gt;
                    &lt;link rel="stylesheet" href="styles.css"&gt;




                  &lt;/head&gt;
                  &lt;body&gt;
                    ...
                  &lt;/body&gt;
                &lt;/html&gt;

        %section
          %p
            The browser parses the HTML and encounters this tag:

          %pre
            %code.html(data-trim)
              :preserve
                &lt;link rel="stylesheet" href="styles.css"&gt;

          %p
            What happens?


        %section

          %p
            Browser asks server:

          %pre.xs.fragment
            %code.nohighlight(data-trim)
              :preserve
                GET /styles.css HTTP/1.1       # I want the file /styles.css
                Host: www.makandra.com         # I know you as www.makandra.com
                Accept: text/css               # I understand the CSS format

          %p.fragment
            Server looks for a local file <code>styles.css</code> and replies:

          %pre.xs.fragment
            %code.nohighlight(data-trim)
              :preserve
                HTTP/1.1 200 OK                # I found what you wanted
                Content-Length: 182            # What you want has 182 bytes
                Content-Type: text/css         # And it's in CSS format
                                               # Here it comes:
                body {
                  font-family: 'Arial';
                }

                h1 {
                  text-transform: uppercase;
                  font-style: italic;
                }

                ...

        %section

          %h2 An advanced example

          %img(src='pictures/screenshot_pretty_button.png' height=150)

          %p
            %a(target='_blank' href='examples/1050_css_button/page.html') View example


        %section
          .columns
            .column
              %h2 HTML
              %pre
                %code.html(data-trim)
                  :preserve
                    &lt;html&gt;
                      &lt;body&gt;
                        &lt;h1&gt;About Capybaras&lt;/h1&gt;
                        &lt;p&gt;
                          The capybara is the
                          <b>largest</b> rodent
                          in the world.
                        &lt;/p&gt;
                      &lt;/body&gt;
                    &lt;/html&gt;
                    &nbsp;
                    &nbsp;

            .column
              %h2 CSS
              %pre
                %code.css(data-trim)
                  :preserve
                    body {
                      font-family: 'Arial';
                    }

                    h1 {
                      text-transform: uppercase;
                      font-style: italic;
                    }

                    b {
                      background-color: #ff0000;
                    }

          %p.center
            %a(target='_blank' href='examples/1045_simple_css/page.html') View both together

        %section
          %h2 Selectors

          %div.fragment
            %code(data-trim)
              <br />
              &lt;h1&gt;About Capybaras&lt;/h1&gt;<br />
              <br />
              &lt;p class="introduction"&gt;<br />
              &nbsp;&nbsp;The <span class="foo">capybara</span> is the largest &lt;b&gt;rodent&lt;/b&gt;<br />
              &nbsp;&nbsp;in the world.<br />
              &lt;/p&gt;<br />
              <br />
              &lt;p&gt;<br />
              &nbsp;&nbsp;The capybara belongs to the subfamily<br />
              &nbsp;&nbsp;&lt;b&gt;Hydrochoerinae&lt;/b&gt; along with ...<br />
              &lt;/p&gt;

        %section
          %h2
            %code h1 { ... }

          %div
            %code(data-trim)
              <br />
              %em
                &lt;h1&gt;About Capybaras&lt;/h1&gt;<br />
              <br />
              &lt;p class="introduction"&gt;<br />
              &nbsp;&nbsp;The <span class="foo">capybara</span> is the largest &lt;b&gt;rodent&lt;/b&gt;<br />
              &nbsp;&nbsp;in the world.<br />
              &lt;/p&gt;<br />
              <br />
              &lt;p&gt;<br />
              &nbsp;&nbsp;The capybara belongs to the subfamily<br />
              &nbsp;&nbsp;&lt;b&gt;Hydrochoerinae&lt;/b&gt; along with ...<br />
              &lt;/p&gt;

        %section
          %h2
            %code p { ... }

          %div
            %code(data-trim)
              <br />
              &lt;h1&gt;About Capybaras&lt;/h1&gt;<br />
              <br />
              %em
                &lt;p class="introduction"&gt;<br />
                &nbsp;&nbsp;The <span class="foo">capybara</span> is the largest &lt;b&gt;rodent&lt;/b&gt;<br />
                &nbsp;&nbsp;in the world.<br />
                &lt;/p&gt;<br />
                <br />
                &lt;p&gt;<br />
                &nbsp;&nbsp;The capybara belongs to the subfamily<br />
                &nbsp;&nbsp;&lt;b&gt;Hydrochoerinae&lt;/b&gt; along with ...<br />
                &lt;/p&gt;

        %section
          %h2
            %code p.introduction { ... }

          %div
            %code(data-trim)
              <br />
              &lt;h1&gt;About Capybaras&lt;/h1&gt;<br />
              <br />
              %em
                &lt;p class="introduction"&gt;<br />
                &nbsp;&nbsp;The <span class="foo">capybara</span> is the largest &lt;b&gt;rodent&lt;/b&gt;<br />
                &nbsp;&nbsp;in the world.<br />
                &lt;/p&gt;<br />
              <br />
              &lt;p&gt;<br />
              &nbsp;&nbsp;The capybara belongs to the subfamily<br />
              &nbsp;&nbsp;&lt;b&gt;Hydrochoerinae&lt;/b&gt; along with ...<br />
              &lt;/p&gt;

        %section
          %h2
            %code p:last-child { ... }

          %div
            %code(data-trim)
              <br />
              &lt;h1&gt;About Capybaras&lt;/h1&gt;<br />
              <br />
              &lt;p class="introduction"&gt;<br />
              &nbsp;&nbsp;The <span class="foo">capybara</span> is the largest &lt;b&gt;rodent&lt;/b&gt;<br />
              &nbsp;&nbsp;in the world.<br />
              &lt;/p&gt;<br />
              <br />
              %em
                &lt;p&gt;<br />
                &nbsp;&nbsp;The capybara belongs to the subfamily<br />
                &nbsp;&nbsp;&lt;b&gt;Hydrochoerinae&lt;/b&gt; along with ...<br />
                &lt;/p&gt;

        %section
          %h2
            %code h1, p:last-child { ... }

          %div
            %code(data-trim)
              <br />
              %em
                &lt;h1&gt;About Capybaras&lt;/h1&gt;<br />
              <br />
              &lt;p class="introduction"&gt;<br />
              &nbsp;&nbsp;The <span class="foo">capybara</span> is the largest &lt;b&gt;rodent&lt;/b&gt;<br />
              &nbsp;&nbsp;in the world.<br />
              &lt;/p&gt;<br />
              <br />
              %em
                &lt;p&gt;<br />
                &nbsp;&nbsp;The capybara belongs to the subfamily<br />
                &nbsp;&nbsp;&lt;b&gt;Hydrochoerinae&lt;/b&gt; along with ...<br />
                &lt;/p&gt;

        %section
          %h2
            %code h1+p { ... }

          %div
            %code(data-trim)
              <br />
              &lt;h1&gt;About Capybaras&lt;/h1&gt;<br />
              <br />
              %em
                &lt;p class="introduction"&gt;<br />
                &nbsp;&nbsp;The <span class="foo">capybara</span> is the largest &lt;b&gt;rodent&lt;/b&gt;<br />
                &nbsp;&nbsp;in the world.<br />
                &lt;/p&gt;<br />
                <br />
              &lt;p&gt;<br />
              &nbsp;&nbsp;The capybara belongs to the subfamily<br />
              &nbsp;&nbsp;&lt;b&gt;Hydrochoerinae&lt;/b&gt; along with ...<br />
              &lt;/p&gt;


        %section
          %h2
            %code b { ... }

          %div
            %code(data-trim)
              <br />
              &lt;h1&gt;About Capybaras&lt;/h1&gt;<br />
              <br />
              &lt;p class="introduction"&gt;<br />
              &nbsp;&nbsp;The <span class="foo">capybara</span> is the largest <em>&lt;b&gt;rodent&lt;/b&gt;</em><br />
              &nbsp;&nbsp;in the world.<br />
              &lt;/p&gt;<br />
              <br />
              &lt;p&gt;<br />
              &nbsp;&nbsp;The capybara belongs to the subfamily<br />
              &nbsp;&nbsp;<em>&lt;b&gt;Hydrochoerinae&lt;/b&gt;</em> along with ...<br />
              &lt;/p&gt;

        %section
          %h2
            %code p.introduction b { ... }

          %div
            %code(data-trim)
              <br />
              &lt;h1&gt;About Capybaras&lt;/h1&gt;<br />
              <br />
              &lt;p class="introduction"&gt;<br />
              &nbsp;&nbsp;The <span class="foo">capybara</span> is the largest <em>&lt;b&gt;rodent&lt;/b&gt;</em><br />
              &nbsp;&nbsp;in the world.<br />
              &lt;/p&gt;<br />
              <br />
              &lt;p&gt;<br />
              &nbsp;&nbsp;The capybara belongs to the subfamily<br />
              &nbsp;&nbsp;&lt;b&gt;Hydrochoerinae&lt;/b&gt; along with ...<br />
              &lt;/p&gt;

        %section
          %h2
            %code * { ... }

          %div
            %code(data-trim)
              %em
                <br />
                &lt;h1&gt;About Capybaras&lt;/h1&gt;<br />
                <br />
                &lt;p class="introduction"&gt;<br />
                &nbsp;&nbsp;The <span class="foo">capybara</span> is the largest &lt;b&gt;rodent&lt;/b&gt;<br />
                &nbsp;&nbsp;in the world.<br />
                &lt;/p&gt;<br />
                <br />
                &lt;p&gt;<br />
                &nbsp;&nbsp;The capybara belongs to the subfamily<br />
                &nbsp;&nbsp;&lt;b&gt;Hydrochoerinae&lt;/b&gt; along with ...<br />
                &lt;/p&gt;

        %section
          %h2 The box model

          %img(src='pictures/box_model.png' height=250)

          %p
            %a(target='_blank' href='examples/1055_box_model/page.html') View example

        %section
          %h2 Positioning

          %img(src='pictures/screenshot_positioning.png' height=300)

          %p
            %a(target='_blank' href='examples/1066_positioning/page.html') View example

        %section
          %h2 Application layout

          %img(src='pictures/screenshot_layout.png' height=300)

          %p
            %a(target='_blank' href='examples/1070_layout/mail1.html') View example

        %section
          %h2 CSS frameworks

          %p
            %a(target='_blank' href='examples/1075_bootstrap/index.html') View example

        %section(data-background-color='#245')
          %h2 Javascript

        %section
          %pre.xxl
            %code.javascript(data-trim)
              :preserve
                // This is a comment

                var x = 1;
                var y = x + 1;

                console.log(y); // 2

        %section
          %pre.xxl
            %code.javascript(data-trim)
              :preserve
                function square(n) {
                  return n * n;
                }

                var z = square(16);

                console.log(z); // 256

        %section
          %h3 HTML
          %pre
            %code.html(data-trim)
              :preserve
                  <div>
                    <p>one</p>
                    <p>two</p>
                    <p>three</p>
                  </div>

          %h3 Javascript
          %pre
            %code.javascript(data-trim)
              :preserve
                var div = document.querySelector('div');
                var children = div.children;
                console.log(children);
                // [<p>one</p>, <p>two</p>, <p>three</p>]

                var parent = children[0].parentNode;
                console.log(parent); // [<div>...</div>]

                console.log(parent === div); // true

                children[1].style.color = 'red';

        %section
          %h2 How to link HTML and Javascript (1)

          %pre
            %code.html(data-trim)
              :preserve
                &lt;html&gt;
                  &lt;body&gt;

                    <p>Hi world</p>

                    &lt;script&gt;
                      var x = 1;
                      var y = x + y;
                    &lt;/script&gt;

                  &lt;/body&gt;
                &lt;/html&gt;

        %section
          %h2 How to link HTML and Javascript (2)

          %pre
            %code.html(data-trim)
              :preserve
                &lt;html&gt;
                  &lt;body&gt;

                    <p>Hi world</p>

                    &lt;script src="scripts.js"&gt;&lt;/script&gt;




                  &lt;/body&gt;
                &lt;/html&gt;

        %section
          %h2 Events

          %p
          %p
            %a(target='_blank' href='examples/1200_event_listener/index.html') View example


        %section
          %h2 Javascript is not my favorite language

          %ul
            %li Bad standard lib (strings, numbers, arrays...) with varying support across browsers.
            %li Not everything is an object.
            %li There are three kinds of <code>null</code>.
            %li Equality is confusing. Also can't define equality for your own types.
            %li No good OOP.
            %li No default receiver.
            %li DOM API is often impractical and inconsistent across browsers.

        %section
          %img(src='pictures/caniuse.png' height=500)
          %br
          Your new friend:
          %a(href='http://caniuse.com') caniuse.com



        %section

          %h3 Most people use Javascript with:
          %ul
            %li
              A precompiler to make the language less horrible (Coffeescript, Babel)
            %li
              A utility library to patch holes in the Stdlib (Underscore, Lodash)
            %li
              A library to hide browser bugs and pave over the DOM API (jQuery)
            %li
              A number of half-broken "polyfills" which backport modern Javascript features to old browsers

        %section
          %h3 Is this object an array?

          .fragment
            %h4 Pure Javascript

            %pre
              %code.javascript(data-trim)
                Object.prototype.toString.call(object) === '[object Array]'

          .fragment
            %h4 Javascript + Underscore.js

            %pre
              %code.javascript(data-trim)
                _.isArray(object)

        %section
          %h3 Hide the children of all &lt;p&gt; tags

          .fragment
            %h4 Pure Javascript

            %pre
              %code.javascript(data-trim)
                :preserve
                  var paragraphs = document.querySelectorAll('p');
                  for (var p = 0; p < paragraphs.length; p++) {
                    var paragraph = paragraphs[p];
                    var children = paragraphs.children;
                    for (var c = 0; c < children.length; c++) {
                      var child = children[c];
                      c.style.display = 'none';
                    }
                  }

          .fragment
            %h4 Javascript + jQuery

            %pre
              %code.javascript(data-trim)
                :preserve
                  $('p').children().hide();

        %section
          %h3 Make a class <code>Student</code><br />which inherits from <code>Person</code>

          .columns
            .column
              .fragment
                %h4 Pure Javascript

                %pre.xxxs
                  %code.javascript(data-trim)
                    :preserve
                      function Student(name) {
                        this.name = name;
                      }

                      Student.prototype = new Person();

                      Student.prototype.constructor = Student;

                      Student.prototype.sayHello = function() {
                        console.log("Hello, I'm " + this.name);
                      };

            .column
              .fragment
                %h4 Javascript + Babel

                %pre.xxxs
                  %code.javascript(data-trim)
                    :preserve
                      class Student extends Person {

                        constructor(name) {
                          this.name = name;
                        }

                        sayHello() {
                          console.log("Hello, I'm " + this.name);
                        }

                      }

        %section(data-background-color='#245')
          %h2 Web applications

        %section
          %p
            Let's write a web app that returns the current time:
          %pre
            %code.nohighlight(data-trim)
              http://timeapp.com/now.html

        %section

          %p
            Browser asks server:

          %pre.xs.fragment
            %code.nohighlight(data-trim)
              :preserve
                GET /now.html HTTP/1.1         # I want the file /now.html
                Host: timeapp.com              # I want it from timeapp.com
                Accept: text/html, text/plain  # I understand HTML and plain text

          %p.fragment
            Server looks for a local file <code>now.html</code> and replies:

          %pre.xs.fragment
            %code.nohighlight(data-trim)
              :preserve
                HTTP/1.1 200 OK                # I found what you wanted
                Content-Length: 114            # What you want has 114 bytes
                Content-Type: text/plain       # And it's in plain text
                                               # Here it comes:
                The time is 15:00:00.

          <br />&nbsp;
          <br />&nbsp;
          <br />&nbsp;

        %section

          %p
            Browser asks server:

          %pre.xs
            %code.nohighlight(data-trim)
              :preserve
                GET /now.html HTTP/1.1         # I want the file /now.html
                Host: timeapp.com              # I want it from timeapp.com
                Accept: text/html, text/plain  # I understand HTML and plain text

          %p
            %span.fragment
              Server runs a program <code>time.exe</code>.<br>
            %span.fragment
              The program <code>time.exe</code> writes the current time to <code>STDOUT</code>:

          %pre.xs.fragment
            %code.ruby(data-trim)
              :preserve
                print "The time is " + Time.now.to_s

          %p
            %span.fragment
              Server takes the program output and sends it the browser:

          %pre.xs.fragment
            %code.nohighlight(data-trim)
              :preserve
                HTTP/1.1 200 OK                # I found what you wanted
                Content-Length: 114            # What you want has 59 bytes
                Content-Type: text/plain       # And it's in plain text
                                               # Here it comes:
                The time is 14:37:05.

        %section
          %h3 You can write web apps in any language

          %p
            Popular choices:

          %ul
            %li PHP
            %li Ruby
            %li Python
            %li Java

          %p
            The following examples are in Ruby, but concepts apply to all languages.

        %section
          %h2 The chat app

          %ul
            %li
              %a(target='_blank' href='examples/2000_chat/src') View source

          %p
            To run the chat app:

          %pre
            %code.nohighlight(data-trim)
              :preserve
                cd examples/2000_chat/src
                ruby app.rb

          %p
            You can now access the app at
            %a(href='http://localhost:4567/channel') http://localhost:4567/channel

        %section
          %p
            The user types into her address bar:
          %pre
            %code.nohighlight(data-trim)
              http://chatapp.com/channel
          %p
            What happens?

        %section

          %p
            Browser asks server:

          %pre.xs
            %code.nohighlight(data-trim)
              :preserve
                GET /channel HTTP/1.1          # I want /channel
                Host: chatapp.com              # I want it from chatapp.com
                Accept: text/html, text/plain  # I understand HTML and plain text

          %p.fragment
            Server asks the program <code>app.rb</code> for <code>/channel</code>.<br>
          %p.fragment
            The program outputs a string of HTTP/HTML.
          %p.fragment
            The server takes the program output and sends it the browser:

          %pre.xs.fragment
            %code.nohighlight(data-trim)
              :preserve
                HTTP/1.1 200 OK                # I found what you wanted
                Content-Length: 1589           # What you want has 1589 bytes
                Content-Type: text/html        # And it's in HTML format
                                               # Here it comes:
                &lt;html&gt;
                  ...
                &lt;/html&gt;

        %section
          %p
            The user sends a message to the chat channel:
          %pre
            %code.nohighlight(data-trim)
              Hello world
          %p
            What happens?

        %section
          %p
            Browser asks server:

          %pre.xxs
            %code.nohighlight(data-trim)
              :preserve
                POST /send HTTP/1.1                              # I'm posting data to /send
                Host: chatapp.com                                # I'm posting it to chatapp.com
                Content-Type: application/x-www-form-urlencoded  # I'm posting key/value pairs
                                                                 # Here it comes:
                message=Hello+world

          %p.fragment
            Server calls the program <code>app.rb</code> with the posted data.
          %p.fragment
            The program stores the message and outputs a string of HTTP.
          %p.fragment
            The server takes the program output and sends it the browser:

          %pre.xxs.fragment
            %code.nohighlight(data-trim)
              :preserve
                HTTP/1.1 303 See Other   # This conversation continues elsewhere
                Location: /channel       # Request /channel to continue

          %p.fragment
            The browser automatically makes another request to <code>/channel</code>
            and gets a fresh copy of the message list.

        %section
          %h2
            Improving the<br>user interface (1)

        %section
          %h3 Scrolling to the bottom
          %pre.xs
            %code.javascript(data-trim)
              :preserve
                function showLastMessage() {
                  var lastMessage = document.querySelector('.message:last-child');
                  if (lastMessage) {
                    lastMessage.scrollIntoView();
                  }
                }

                window.addEventListener('load', showLastMessage);


        %section
          %h2
            Improving the<br>user interface (2)

        %section
          %h2
            How do we notice when another user sends a message?<br>
            %span.red.fragment
              We don't

        %section
          %h2 Classic web applications are a slide show

          %p
            ⇢ User requests a website<br>
            %span.green
              ⇠ Server sends a fresh copy
          %p
            ⇢ User clicks a link<br>
            %span.green
              ⇠ Server sends a fresh copy
          %p
            ⇢ User submits a form<br>
            %span.green
              ⇠ Server sends a fresh copy
          %p
            ⇢ User reloads the page manually<br>
            %span.green
              ⇠ Server sends a fresh copy
          %p
            ⇣ Another user sends a message<br>
            %span.red
              × Server has no way to push the update to the user

        %section
          %h3 Refreshing with AJAX

          %pre.xs
            %code.javascript(data-trim)
              :preserve
                function refresh() {
                  var request = new XMLHttpRequest();
                  request.open('GET', '/channel', true);
                  request.onload = function() {
                    var newHtml = request.responseText;
                    var parser = new DOMParser();
                    var newDocument = parser.parseFromString(newHtml, 'text/html');
                    var newChannel = newDocument.querySelector('.channel');
                    var oldChannel = document.querySelector('.channel');
                    oldChannel.innerHTML = newChannel.innerHTML;
                  };
                  request.send();
                }

                setInterval(refresh, 1000);

        %section
          %h2
            Improving the<br>user interface (3)

        %section
          %h3 Client-side search
          %pre.xxxs
            %code.javascript(data-trim)
              :preserve
                function search() {
                  var queryInput = document.querySelector('.search-form input');
                  var query = queryInput.value.toLowerCase();
                  var messageElements = document.querySelectorAll('.message');
                  for (var i = 0; i < messageElements.length; i++) {
                    var messageElement = messageElements[i];
                    var text = messageElement.textContent.toLowerCase();
                    var isMatch = (text.indexOf(query) != -1);
                    if (isMatch) {
                      messageElement.style.display = 'block';
                    } else {
                      messageElement.style.display = 'none';
                    }
                  }
                }

                window.addEventListener('load', function() {
                  var queryInput = document.querySelector('.search-form input');
                  queryInput.addEventListener('input', search);
                });

        %section
          %h2 Improving <code>app.rb</code>

          %p
            Our current implementation has <code>app.rb</code> is a single script<br>
            with a lot of responsibilities:

          %ul
            %li Routing
            %li Storage
            %li Business logic

          %p
            This is not how it's done in the real world.

        %section

          %h3 Version 1

          %pre.xs
            %code.ruby(data-trim)
              :preserve
                &nbsp;

                get '/channel' do
                  @messages = File.read('messages.txt').lines
                  erb(:channel)
                end

                get '/send' do
                  message = params['message']
                  file = File.open('messages.txt', 'a')
                  file.puts(message)
                  file.close()
                  redirect('/channel')
                end
                &nbsp;

        -#%section
        -#
        -#  %h3 SQL database
        -#
        -#  %pre.xs
        -#    %code.nohighlight(data-trim)
        -#      :preserve
        -#        +----+----------------------------------+
        -#        | id | text                             |
        -#        +----+----------------------------------+
        -#        | 1  | Hello world                      |
        -#        | 2  | Anyone here?                     |
        -#        | 3  | Here goes another message        |
        -#        +----+----------------------------------+
        -#
        -#
        -#
        -#
        -#
        -#
        -#
        -#        &nbsp;

        %section

          %h3 SQL database

          %pre.xs
            %code.ruby(data-trim)
              :preserve
                db = Mydb::Client.new(host: 'localhost')

                get '/channel' do
                  @messages = db.select_values('SELECT text FROM messages')
                  erb(:channel)
                end

                get '/send' do
                  message = params['message']
                  escaped = db.escape(message)
                  db.execute('INSERT INTO messages VALUES (' + escaped + ')')
                  redirect('/channel')
                end
                &nbsp;
                &nbsp;

        %section

          .columns
            .column
              %h3 Controller

              %pre.xs
                %code.ruby(data-trim)
                  :preserve
                    channel = Channel.new

                    get '/channel' do
                      @messages = channel.messages
                      erb(:channel)
                    end

                    get '/send' do
                      message = params['message']
                      channel.add_message(message)
                      redirect('/channel')
                    end
                    &nbsp;
                    &nbsp;
                    &nbsp;
            .column
              %h3 Model

              %pre.xs
                %code.ruby(data-trim)
                  :preserve
                    class Channel

                      def initialize
                        @db = Mydb::Client.new
                      end

                      def messages
                        @db.select_values('SELECT text FROM messages')
                      end

                      def add_message(message)
                        escaped = @db.escape(message)
                        @db.execute('INSERT INTO messages VALUES (' + escaped + ')')
                      end

                    end

        %section
          .center
            %img(src='pictures/web_app_cluster.png' width=600)

        %section
          %h1 Trainee!!
          %h1 Praktikant?
          %h1 Werkstudent


    %script{:src => "lib/js/head.min.js"}
    %script{:src => "js/reveal.js"}
    :javascript
      // Full list of configuration options available at:
      // https://github.com/hakimel/reveal.js#configuration
      Reveal.initialize({
        controls: true,
        progress: true,
        history: true,
        center: true,

        transition: 'none', // none/fade/slide/convex/concave/zoom

        // Optional reveal.js plugins
        dependencies: [
          { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },
          { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
          { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
          { src: 'plugin/highlight/highlight.js', async: true, condition: function() { return !!document.querySelector( 'pre code' ); }, callback: function() { hljs.initHighlightingOnLoad(); } },
          { src: 'plugin/zoom-js/zoom.js', async: true },
          { src: 'plugin/notes/notes.js', async: true }
        ]
      });
